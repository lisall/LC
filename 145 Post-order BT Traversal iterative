// Time O(n)
// Space O(h)
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        if (root == null) {
            return res;
        }
        LinkedList<TreeNode> s = new LinkedList<>();
        s.offerFirst(root);
        TreeNode prev = null;
        while (!s.isEmpty()) {
            TreeNode cur = s.peekFirst();
            if (prev == null || cur == prev.left || cur == prev.right) { // both the subtree has not been visited
                if (cur.left != null) {
                    s.offerFirst(cur.left);
                   
                } else if (cur.right != null) {
                    s.offerFirst(cur.right);
                } else {
                    res.add(cur.val);
                    s.pollFirst();
                }
            } else if (prev == cur.left) { // the left subtree has bee visited
                if (cur.right != null) {
                    s.offerFirst(cur.right);
                } else {
                    res.add(cur.val);
                    s.pollFirst();
                }
            } else { // both of the subtree has been visited
                res.add(cur.val);
                s.pollFirst();
            }
            prev = cur;
        }
        return res;
    }
}
